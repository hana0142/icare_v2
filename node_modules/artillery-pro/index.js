/** @license
 * (c) 2021 Artillery Software Inc. All rights reserved.
 *
 * This file is part of Artillery Pro (https://artillery.io)
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Shoreditch Ops Ltd. The intellectual and
 * technical concepts contained herein are proprietary to
 * Shoreditch Ops Ltd and are protected by copyright law.
 *
 * Modification and/or redistribution of this material is
 * strictly forbidden unless prior written permission is
 * obtained from Shoreditch Ops Ltd.
 *
 */
"use strict";require("./lib/create-artillery-log")();const debug=require("debug")("artillery:pro"),path=require("path"),commands=require("./lib/commands"),{Command,flags}=require("@oclif/command"),chalk=require("chalk"),pkg=require("./package.json"),{supportedRegions,isActivatedSync}=require("./lib/util"),updateNotifier=require("update-notifier"),version=pkg.version,{ALLOWED_CONFIG_PARAMETERS,VALID_STACK_OVERRIDES}=require("./lib/constants"),notifier=updateNotifier({pkg:pkg,updateCheckInterval:864e5});function collect(val,memo){return memo.push(val),memo}notifier.update&&notifier.notify({message:`Good news! An update for ${chalk.bold(pkg.name)} is available.\n(current version: ${chalk.yellow("v"+version)} â†’ new version: ${chalk.green("v"+notifier.update.latest)})\n\nRun ${chalk.green("npm install -g "+pkg.name+"@latest")} to upgrade`});const stackOverrides=Object.keys(VALID_STACK_OVERRIDES).map(k=>`  ${k} - ${VALID_STACK_OVERRIDES[k].description}`).join("\n");function init(program){debug("init"),program.command("run-test [test]").alias("run-cluster").description("Run a test from a cloud cluster. <test> may point to a local file or specify a named test created with the create-test command").option("--count <number>",runTestDescriptions.count).option("--cluster <name>",runTestDescriptions.cluster).option("-r, --region <region>",runTestDescriptions.region).option("-e, --environment <name>","Use a named test environment").option("-t, --target <url>","Set target URL").option("-k, --insecure","Allow insecure TLS connections").option("--config <path>","Use test config from a separate location").option("--overrides <JSON>","Object describing parts of the test script to override").option("-o, --output <path>","Write a JSON log to file at provided path").option("--launch-type <type>","Set the platform on which to run the test. Supported values: ecs:fargate, ecs:ec2").option("--secret <name>","Make a secret created with set-secret available as an environment variable in the test",collect,[]).option("--launch-config <JSON>","Object describing launch configuration for ECS workers").option("--task-role-name <name>","Name of the IAM role for Artillery workers to assume").option("--fargate","Use Fargate to run the test. This flag is deprecated, use --launch-type ecs:fargate instead").option("--subnet-ids <list>","Comma-separated list of subnet IDs. Fargate tasks will be placed into these subnets.").option("--public-subnet-ids <list>","[Deprecated] Comma-separated list of public subnet IDs. Fargate tasks will be placed into these subnets.").option("--security-group-ids <id>","Optional: comma-separated security group IDs to use for tasks when running tests from Fargate").option("--tags <tags>","Comma-separated list of tags in key:value format to tag the test run, for example: --tags team:sre,service:foo").option("--note <text>","Add a note to the test run").option("--test-run-id <id>",runTestDescriptions.testRunId).option("--packages <package.json>",runTestDescriptions.packages).option("-b, --bundle <name>",runTestDescriptions.bundle).action(commands.runCluster),program.command("stop-test <id>").description("Stop a running test").action(commands.stopTest),program.command("get-tests").option("--json","Format output as JSON").description("List running tests").action(commands.getTests),program.command("describe-test-run <id>").description("Describe a test run").action(commands.describeTestRun),program.command("list-test-runs").option("--tags <tags>","Comma-separated list of tags in key:value format. Return test run ids that match those tags").description("List test results").action(commands.listTestRuns),program.command("list-tags").description("List tags").action(commands.listTags),program.command("post-note").option("--test-run-id <id>","Id of the test run that the note should be posted to").option("--text <text>","Text of the note").description("Post a note for a test run").action(commands.postNote),program.command("create-test <script>").description("Package up a test script and name it to speed up running tests with run-test").option("-n, --name <name>","The name for the test (to be used in run-test)").option("--config <path>","Use common test configuration for this named test").action(commands.createTest),program.command("list-tests").description("List test definitions that have been created").option("--json","Format output as JSON").action(commands.listTests),program.command("delete-test <name>").description("Delete a named test").action(commands.deleteTest),program.command("deploy").alias("setup-pro").description(deployDescriptions).option("--target <platform>",deployDescriptions.target).option("--set <key=value>",deployDescriptions.set,collect,[]).option("-r, --region <region>",deployDescriptions.region).option("--export-terraform-template","Export a Terraform template which creates an Artillery Pro CloudFormation stack").option("--upgrade",deployDescriptions.upgrade).option("--license-key-file <path>",deployDescriptions.licenseKeyFile).option("--license-key-text <text>",deployDescriptions.licenseKeyFile).action(commands.setup),program.command("set-config-value").description(`Set a configuration value. Must be one of: ${ALLOWED_CONFIG_PARAMETERS.join(", ")}`).option("-n, --name <name>","Name of the configuration parameter").option("-v, --value <value>","Value of the configuration parameter").option("-r, --region <region>",`AWS region where Artillery Pro is deployed (one of: ${supportedRegions.join(", ")})`).action(commands.configSet),program.command("set-secret").description("Create a secret to use in tests").option("-n, --name <name>","Name of the secret, e.g. MY_API_KEY").option("-v, --value <value>","Value of the secret").option("--backend <backend>",'Storage backend, must be set to "ssm"').option("-r, --region <region>","AWS region where the secret should be created").action(commands.secretSet),program.command("list-secrets").description("List secrets in a region").option("-r, --region <region>","AWS region to list secrets in").action(commands.listSecrets),program.command("subscription").description(subscriptionDescriptions.description).option("--email <email>",subscriptionDescriptions.email).option("--json",subscriptionDescriptions.json).action(commands.subscriptionStatus)}function getPluginPath(){return path.join(__dirname,"./lib/plugins")}const runTestDescriptions={count:"Number of load generators to launch",cluster:"Name of the ECS cluster to run the test on",region:`The AWS region to run in (${supportedRegions.join(", ")})`,testRunId:"Override test run id. Note: this must be unique across all test runs",packages:"Path to package.json file which lists dependencies for the test script",bundle:"Run a pre-packaged test bundle"},runTestSpec={description:`launch a test from your AWS account

Requires an active Artillery Pro subscription (https://artillery.io)

Examples:

  To launch a test with 10 load generators from using AWS Fargate in us-east-1:

    $ artillery run:aws --launch-type fargate --count 10 --region us-east-1 my-test.yml
`,args:[{name:"script",required:!1}],flags:{count:flags.integer({description:runTestDescriptions.count}),cluster:flags.string({description:runTestDescriptions.cluster}),region:flags.string({char:"r",description:runTestDescriptions.region}),secret:flags.string({}),"launch-type":flags.string({}),"launch-config":flags.string({}),"subnet-ids":flags.string({}),"security-group-ids":flags.string({}),"task-role-name":flags.string({}),target:flags.string({char:"t",description:"Set target endpoint. Overrides the target already set in the test script"}),output:flags.string({char:"o",description:"Write a JSON report to file"}),insecure:flags.boolean({char:"k",description:"Allow insecure TLS connections; do not use in production"}),environment:flags.string({char:"e",description:"Use one of the environments specified in config.environments"}),config:flags.string({description:"Read configuration for the test from the specified file"}),overrides:flags.string({description:"Dynamically override values in the test script; a JSON object"}),input:flags.string({char:"i",description:"Input script file",multiple:!0,hidden:!0}),tags:flags.string({description:"Comma-separated list of tags in key:value format to tag the test run, for example: --tags team:sre,service:foo"}),"test-run-id":flags.string({description:runTestDescriptions.testRunId}),note:flags.string({}),packages:flags.string({description:runTestDescriptions.packages}),bundle:flags.string({char:"b",description:runTestDescriptions.bundle})}},deployDescriptions={description:"Set up Artillery Pro for an AWS account",target:'Deployment platform. This is a placeholder flag. The default value is "aws"',set:`Set a value to customize. Supported keys:\n\n${stackOverrides}\n\n`,region:"AWS region to deploy to",upgrade:"Upgrade an existing Artillery Pro installation in an AWS account",licenseKeyFile:"Path to file containing a license key",licenseKeyText:"Contents of a license key"},deploySpec={description:deployDescriptions.description,args:[],flags:{target:flags.string({description:deployDescriptions.target,default:"aws"}),set:flags.string({description:deployDescriptions.set,multiple:!0}),region:flags.string({char:"r",description:deployDescriptions.region}),upgrade:flags.boolean({description:deployDescriptions.upgrade}),"license-key-file":flags.string({description:deployDescriptions.licenseKeyFile}),"license-key-text":flags.string({description:deployDescriptions.licenseKeyText})}},subscriptionDescriptions={description:"Show subscription status of Artillery Pro",email:"Request license key to be sent to an email address",json:"Format output as JSON"},subscriptionSpec={description:subscriptionDescriptions.description,args:[],flags:{email:flags.string({description:subscriptionDescriptions.email}),json:flags.boolean({description:subscriptionDescriptions.json})}};module.exports={init:init,isActivatedSync:isActivatedSync,getPluginPath:getPluginPath,version:version,oclif:{runTest:runTestSpec,deploy:deploySpec,subscription:subscriptionSpec},commands:commands};