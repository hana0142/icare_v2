/** @license
 * (c) 2021 Artillery Software Inc. All rights reserved.
 *
 * This file is part of Artillery Pro (https://artillery.io)
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Shoreditch Ops Ltd. The intellectual and
 * technical concepts contained herein are proprietary to
 * Shoreditch Ops Ltd and are protected by copyright law.
 *
 * Modification and/or redistribution of this material is
 * strictly forbidden unless prior written permission is
 * obtained from Shoreditch Ops Ltd.
 *
 */
"use strict";const fs=require("fs"),A=require("async"),AWS=require("aws-sdk"),chalk=require("chalk"),debug=require("debug")("commands:setup"),pkg=require("../../package.json"),request=require("got");module.exports={trySetup:trySetup,policyExists:policyExists};const{getAccountId,supportedRegions}=require("../util"),{ensureParameterExists}=require("../aws-util"),{SQS_QUEUES_NAME_PREFIX,S3_BUCKET_NAME_PREFIX,CF_STACK_NAME,CLI_USER_POLICY_NAME,CLI_USER_ROLE_NAME,LOGGROUP_NAME,CLI_USER_POLICY_ARN_OUTPUT_KEY,CLI_USER_ROLE_ARN_OUTPUT_KEY,VALID_STACK_OVERRIDES}=require("../constants"),VERSION=require("../../package.json").version,path=require("path"),tmp=require("tmp"),ejs=require("ejs"),YAML=require("yaml-js"),util=require("../util");let accountId,BUCKET_NAME,TOKEN;const s3=new AWS.S3({apiVersion:"2006-03-01"});function getPolicyArn(context,callback){const cf=new AWS.CloudFormation({apiVersion:"2010-05-15"});var params={StackName:CF_STACK_NAME};cf.describeStacks(params,function(err,cfResponse){if(err)return debug(err),callback(err,context);if(1!==cfResponse.Stacks.length)return debug(cfResponse),callback(new Error(`Expected to find exactly one stack with the name ${CF_STACK_NAME}`),context);{const outputs=cfResponse.Stacks[0].Outputs;return outputs.forEach(o=>{o.OutputKey===CLI_USER_POLICY_ARN_OUTPUT_KEY&&(context.policyArn=o.OutputValue,debug("policyArn:",context.policyArn)),o.OutputKey===CLI_USER_ROLE_ARN_OUTPUT_KEY&&(context.roleArn=o.OutputValue,debug("roleArn:",context.roleArn))}),callback(null,context)}})}async function trySetup(options){const stackOverrides={};for(var[k,v]of Object.entries(VALID_STACK_OVERRIDES))stackOverrides[k]=v.default;if(options.set){for(const x of options.set){var components=x.split("=");2!==components.length&&(console.error('Arguments to --set must be key=value pairs. Keys or values may not contain "=" characters.'),console.error("Could not parse: ",x),process.exit(1)),stackOverrides[components[0]]=components[1]}for(const[k,v]of Object.entries(stackOverrides))-1===Object.keys(VALID_STACK_OVERRIDES).indexOf(k)&&(console.error(`Unknown override: ${k}`),console.error(`Valid options: ${Object.keys(VALID_STACK_OVERRIDES).join(", ")}`),process.exit(1))}if(options&&(options.licenseKeyFile||options["license-key-file"])){var licenseFilePath=options.licenseKeyFile||options["license-key-file"],licenseFilePath=path.resolve(process.cwd(),licenseFilePath);try{TOKEN=fs.readFileSync(licenseFilePath,"utf8")}catch(fsErr){console.error(chalk.red("Error:"),`could not read ${licenseFilePath}`),process.exit(1)}}else options&&(options.licenseKeyText||options["license-key-text"])?TOKEN=options.licenseKeyText||options["license-key-text"]:process.env.ARTILLERY_PRO_TOKEN?TOKEN=process.env.ARTILLERY_PRO_TOKEN:process.env.ARTILLERY_PRO_LICENSE_KEY_TEXT&&(TOKEN=process.env.ARTILLERY_PRO_LICENSE_KEY_TEXT);if(options.exportTerraformTemplate)return console.error("WARNING: Terraform export with --export-terraform-template has been deprecated and will be removed in a future version"),callback=(err,template)=>{err?console.error(err):console.log(template)},createCFTemplate((err,tfTemplate)=>{if(err)return callback(err);tfTemplate=`
resource "aws_cloudformation_stack" "${CF_STACK_NAME}" {
  name = "${CF_STACK_NAME}"
  capabilities = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  tags {
    ArtilleryProStackSource = "terraform"
    ArtilleryProStackVersion = "${VERSION}"
  }
  template_body = <<STACK
${JSON.stringify(YAML.load(tfTemplate),null,4)}
STACK
}
`;return callback(null,tfTemplate)});var callback;function checkBucket(result,next){getAccountId(function(err,acctid){return err?next(err,result):(result.accountId=acctid,accountId=acctid,debug("accountId:",accountId),s3.listObjectsV2({Bucket:`${S3_BUCKET_NAME_PREFIX}-${accountId}`,MaxKeys:1},function(s3Err,s3Response){return s3Err?"NoSuchBucket"===s3Err.code?(result.bucket=!1,next(null,result)):next(s3Err,result):(result.bucket=!0,next(null,result))}))})}function createCFTemplate(callback){A.waterfall([A.constant({bucket:!1,accountId:null,bucketName:null}),checkBucket,function(context,next){return context.bucketName=`${S3_BUCKET_NAME_PREFIX}-${context.accountId}`,BUCKET_NAME=context.bucketName,context.bucket?next(null,context):s3.createBucket({Bucket:context.bucketName},(s3Err,s3Resp)=>next(s3Err||null,context))},function(context,next){TOKEN?(debug("ensureTokenProvided: provided via options/env"),process.nextTick(()=>{next(null,context)})):(debug("ensureTokenProvided: trying to fetch from rc"),util.getRC((noTokenErr,doc)=>{if(noTokenErr){noTokenErr=new Error('License key not provided. Please use --license-key-file or --license-key-text option to provide a license key.\nRun "artillery deploy --help" for more information.');return debug(noTokenErr),next(noTokenErr,context)}return debug("ensureTokenProvided: fetched from rc"),context.rcDoc=doc,TOKEN=doc.token,next(null,context)}))},function(context,next){util.verify(TOKEN,(invalidTokenErr,data)=>{if(invalidTokenErr){invalidTokenErr=new Error("License key does not appear to be valid. Please check that\nthe key provided to this command matches the one you received exactly.");return next(invalidTokenErr,context)}return context.decodedToken=data,next(null,context)})},async function(context){const sts=new AWS.STS;try{var accountId=(await sts.getCallerIdentity({}).promise()).Account,payload=Object.assign({awsAccountId:accountId,sourceOperation:"deploy"},context.rcDoc);debug(payload);var{}=await request.post("https://api.artillery.io/v1/cl",{json:payload,responseType:"json"})}catch(err){debug(err)}return context},function(context,next){util.getRC((getErr,doc)=>{let newDoc;newDoc=getErr?{}:doc,newDoc.token=TOKEN,newDoc.version=pkg.version,newDoc.backendRegion=options.region,debug("rc doc:"),debug(newDoc),util.putRC(newDoc,putErr=>next(putErr||null,context))})},function(context,next){debug(context);var cfTemplate=fs.readFileSync(path.resolve(__dirname,"../../resources/artilleryio-pro-stack.yaml"),"utf8"),cfTemplate=ejs.render(cfTemplate,{BUCKET_NAME_PREFIX:S3_BUCKET_NAME_PREFIX,AWS_ACCOUNT_ID:accountId,CLI_USER_POLICY_NAME:stackOverrides["cli-user-policy-name"],CLI_USER_ROLE_NAME:stackOverrides["cli-user-role-name"],LOGGROUP_NAME:LOGGROUP_NAME,SUPPORTED_REGIONS:supportedRegions},{});return context.cfTemplate=cfTemplate,next(null,context)}],function(err,context){return callback(err,context.cfTemplate)})}options.region||(console.log("A region must be specified. For example: us-east-1"),process.exit(1)),-1===util.supportedRegions.indexOf(options.region)&&(console.log(`Unsupported region (${options.region}) provided. Please specify one of: ${util.supportedRegions.join(", ")} `),process.exit(1)),AWS.config.update({region:options.region}),A.waterfall([A.constant({cloudFormation:!1,cliUserPolicy:!1,stackOverrides:stackOverrides}),function(context,next){return console.log("Detecting an existing installation..."),next(null,context)},function(result,next){const cf=new AWS.CloudFormation;cf.describeStacks({StackName:CF_STACK_NAME},function(cfErr,cfResponse){return cfErr?cfErr.code.match(/ValidationError/)?(result.cloudFormation=!1,next(null,result)):next(cfErr,result):(result.cloudFormation=!0,next(null,result))})},checkCLIUserPolicy],async function(err,result){var cb;err&&(/CredentialsError/.test(err.code)?(console.log(chalk.red("Error:"),"Could not acquire AWS credentials\n"),process.env.AWS_PROFILE||process.env.AWS_ACCESS_KEY_ID||(console.log("Use the AWS_PROFILE environment variable to set the profile to use,\nset up a default profile, or set the AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY\nenvironment variables"),console.log("\nFor more information please see:"),console.log("http://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html"),console.log("http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html"))):(console.log(err),console.log(chalk.red("\nError: "),"Could not complete the check for required AWS resources.")),process.exit(1)),allExist(result)||noneExist(result)||(debug("Potentially inconsistent installation detected"),debug(result)),console.log("Creating/updating Artillery Pro backend components..."),console.log("Waiting for CloudFormation..."),cb=async err=>{err?(console.log(util.formatError(err)),process.exit(1)):setBucketLifecyclePolicy(BUCKET_NAME,async(err,context)=>{if(err)console.log(err),process.exit(1);else{try{await ensureParameterExists("/artilleryio/NPM_TOKEN","null","SecureString"),await ensureParameterExists("/artilleryio/NPM_REGISTRY","null","String"),await ensureParameterExists("/artilleryio/NPM_SCOPE","null","String"),await ensureParameterExists("/artilleryio/ARTIFACTORY_AUTH","null","SecureString"),await ensureParameterExists("/artilleryio/ARTIFACTORY_EMAIL","null","String"),await ensureParameterExists("/artilleryio/NPMRC","null","SecureString"),await ensureParameterExists("/artilleryio/NPM_SCOPE_REGISTRY","null","String")}catch(err){console.log(util.formatError(err)),process.exit(1)}getPolicyArn({},(err,context)=>{err?console.log(err):(console.log("-".repeat(39)),console.log(`Next steps:

To launch tests with Artillery Pro from this AWS account (${accountId}),
the IAM user that runs "artillery" commands will need to have the
necessary IAM permissions. Those permissions can be granted in
one of two ways:

1. (Recommended) Assume the IAM role that grants IAM permissons needed to
   run tests.

   Role ARN: ${context.roleArn}

   Example policy document to allow an IAM user to assume the role:

   {
     "Version": "2012-10-17",
     "Statement": {
       "Effect": "Allow",
       "Action": "sts:AssumeRole",
       "Resource": "${context.roleArn}"
     }
   }

   Learn more about assuming roles: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html

  or:

2. (Legacy) Attach the policy that grants IAM permissions to run tests
   directly to the IAM user.

   Policy ARN: ${context.policyArn}

   Learn more about attaching policies: https://docs.aws.amazon.com/cli/latest/reference/iam/attach-user-policy.html


Once IAM permissions have been set up, you can start running tests with "artillery run-test".

Learn more about running tests with Artillery Pro:

https://artillery.io/docs/guides/guides/running-tests-with-artillery-pro.html
`),console.log("-".repeat(39),"\n"))})}})},createCFTemplate((tmpobj,cfTemplate)=>{if(tmpobj)return cb(tmpobj);tmpobj=tmp.fileSync();fs.writeFileSync(tmpobj.fd,cfTemplate,"utf8"),debug(`CF template written to: ${tmpobj.name}`);const cfn=require("cfn");cfn({name:CF_STACK_NAME,capabilities:["CAPABILITY_IAM","CAPABILITY_NAMED_IAM"],template:tmpobj.name,awsConfig:{region:options.region}}).then(()=>cb(null)).catch(err=>cb(err))})})}function setBucketLifecyclePolicy(bucketName,next){s3.putBucketLifecycleConfiguration({Bucket:bucketName,LifecycleConfiguration:{Rules:[{Expiration:{Days:1},Filter:{Prefix:"tests/aht__"},ID:"RemoveAdHocTestData",Status:"Enabled"},{Expiration:{Days:2},Filter:{Prefix:"index/test-runs"},ID:"RemoveTestRunIndex",Status:"Enabled"}]}},(s3Err,s3Response)=>s3Err?next(s3Err):(debug("putBucketLifecycleConfiguration done"),next(null)))}function checkCLIUserPolicy(result,next){policyExists(CLI_USER_POLICY_NAME,function(err,found){return err||(result.cliUserPolicy=found),next(err,result)})}function allExist(obj){return-1===Object.keys(obj).map(key=>!0===obj[key]).indexOf(!1)}function noneExist(obj){return-1===Object.keys(obj).map(key=>!1===obj[key]).indexOf(!1)}function policyExists(policyName,cb){const iam=new AWS.IAM;let found=!1,marker=void 0;A.doWhilst(function(next){iam.listPolicies({Marker:marker,Scope:"Local",PathPrefix:"/",MaxItems:parseInt(process.env.TEST_LIST_POLICIES_MAX_ITEMS)||100},function(err,data){return err?next(err):(data.Policies.forEach(policy=>{debug("policy:",policy.PolicyName),policy.PolicyName===policyName&&(found=!0)}),data.Marker&&(marker=data.Marker),next(null,!found&&data.IsTruncated))})},function(shouldKeepGoing){return shouldKeepGoing},function(err){return err?cb(err):cb(null,found)})}