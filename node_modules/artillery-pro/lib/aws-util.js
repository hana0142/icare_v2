const AWS=require("aws-sdk"),util=require("./util");async function getPublicPrivateSubnets(){}async function ecsDescribeTasks(params,ecs){var taskArnChunks=splitIntoSublists(params.tasks,100);const results={tasks:[],failures:[]};for(let i=0;i<taskArnChunks.length;i++){var params2=Object.assign({},params,{tasks:taskArnChunks[i]});try{var ecsData=await ecs.describeTasks(params2).promise();results.tasks=results.tasks.concat(ecsData.tasks),results.failures=results.failures.concat(ecsData.failures)}catch(err){throw err}}return results}function splitIntoSublists(list,maxGroupSize){const result=[];var numGroups=Math.ceil(list.length/maxGroupSize);for(let i=0;i<numGroups;i++)result.push(list.slice(i*maxGroupSize,i*maxGroupSize+maxGroupSize));return result}async function ensureParameterExists(ssmPath,defaultValue,type,region){region&&AWS.config.update({region:region});try{return await parameterExists(ssmPath)?Promise.resolve():putParameter(ssmPath,defaultValue,type)}catch(err){return Promise.reject(err)}}async function parameterExists(getParams,region){region&&AWS.config.update({region:region});const ssm=new AWS.SSM({apiVersion:"2014-11-06"});getParams={Name:getParams,WithDecryption:!0};try{await ssm.getParameter(getParams).promise();return Promise.resolve(!0)}catch(ssmErr){return"ParameterNotFound"===ssmErr.code?Promise.resolve(!1):Promise.reject(ssmErr)}}async function putParameter(path,putParams,type,region){region&&AWS.config.update({region:region});const ssm=new AWS.SSM({apiVersion:"2014-11-06"});putParams={Name:path,Type:type,Value:putParams,Overwrite:!0};try{await ssm.putParameter(putParams).promise();return Promise.resolve()}catch(ssmErr){return Promise.reject(ssmErr)}}module.exports={ecsDescribeTasks:ecsDescribeTasks,getPublicPrivateSubnets:getPublicPrivateSubnets,ensureParameterExists:ensureParameterExists,parameterExists:parameterExists,putParameter:putParameter};