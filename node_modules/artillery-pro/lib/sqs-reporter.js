const EventEmitter=require("events"),https=require("https"),stats=require("./stats2"),AWS=require("aws-sdk"),{Consumer}=require("sqs-consumer"),HdrHistogram=require("hdr-histogram-js"),driftless=require("driftless"),debug=require("debug")("sqs-reporter"),_=require("lodash");class SqsReporter extends EventEmitter{constructor(opts){super(),this.sqsQueueUrl=opts.sqsQueueUrl,this.region=opts.region,this.testId=opts.testId,this.count=opts.count,this.sqsConsumer=null,this.ee=new EventEmitter,this.intermediates=[],this.aggregate=[],this.aggregateHistogram=HdrHistogram.build({bitBucketSize:64,autoResize:!0,lowestDiscernibleValue:2,highestTrackableValue:1e12,numberOfSignificantValueDigits:1}),this.workerState={},this.lastIntermediateReportAt=0,this.taskWatcher=null,this.metricsByPeriod={},this.mergedPeriodMetrics=[]}_allWorkersDone(){return Object.keys(this.workerState).length===this.count}startEcsTaskWatcher(){const self=this;this.taskWatcher=driftless.setDriftlessInterval(()=>{const ecs=new AWS.ECS({region:self.region});var params={tasks:self.taskArns,cluster:self.clusterName};ecs.describeTasks(params,(taskStatus,ecsData)=>{taskStatus&&debug(taskStatus),ecsData&&ecsData.tasks?("STOPPED"===(taskStatus=ecsData.tasks.map(t=>({container:{exitCode:t.containers[0].exitCode,lastStatus:t.containers[0].lastStatus,reason:t.containers[0].reason},lastStatus:t.lastStatus,desiredStatus:t.desiredStatus,stoppedReason:t.stoppedReason,stopCode:t.stopCode})))[0].lastStatus&&(debug("ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨"),debug(taskStatus[0].stopCode,taskStatus[0].stoppedReason)),debug(taskStatus)):debug("taskTracker: returning",ecsData)})},1e4)}stop(){debug("stopping"),this.sqsConsumer.stop()}start(){debug("starting");const self=this;this.ee.on("message",function(body,attrs){if("workerDone"!==body.event&&"workerError"!==body.event){if("done"!==body.event)if(body.msg)self.emit("workerMessage",body,attrs);else if(body.event||!body.serializedHdr){if("workerStats"===body.event){debug("processing workerStats event");var spread=global.artillery.__SSMS.deserializeMetrics(body.stats),period=spread.period;if(debug(spread),void 0===self.metricsByPeriod[period]&&(self.metricsByPeriod[period]=[]),self.metricsByPeriod[period].push(spread),debug("metricsByPeriod:"),debug(self.metricsByPeriod),debug("number of periods processed"),debug(Object.keys(self.metricsByPeriod)),debug("number of metrics collections:"),debug(self.metricsByPeriod[period].length,self.count),self.metricsByPeriod[period].length>=self.count){debug("have metrics from all workers for this period",period);const stats=global.artillery.__SSMS.mergeBuckets(self.metricsByPeriod[String(period)])[String(period)];self.mergedPeriodMetrics.push(stats),stats.summaries={};for(const[name,value]of Object.entries(stats.histograms||{})){const summary=global.artillery.__SSMS.summarizeHistogram(value);stats.summaries[name]=summary,delete self.metricsByPeriod[String(period)]}debug("Emitting stats event"),self.emit("stats",stats)}else debug("Waiting for more workerStats before emitting stats event")}}else{self.intermediates.push(body),self.aggregate.push(body);spread=HdrHistogram.decodeFromCompressedBase64(body.serializedHdr);if(self.aggregateHistogram.add(spread),self.intermediates.length>=self.count){const combined=stats.combine(self.intermediates),intermediateReport=combined.report(),histo=HdrHistogram.build({bitBucketSize:64,autoResize:!0,lowestDiscernibleValue:2,highestTrackableValue:1e12,numberOfSignificantValueDigits:1});self.intermediates.forEach(b=>{histo.add(HdrHistogram.decodeFromCompressedBase64(b.serializedHdr))}),updateReport(intermediateReport,histo),0===intermediateReport.scenariosCreated&&0===intermediateReport.scenariosCompleted&&0===intermediateReport.requestsCompleted||(spread=self.calculateSpread(combined),debug("spread:",spread),self.emit("stats",{report:()=>intermediateReport}),self.intermediates=[])}}}else if(self.workerState[attrs.workerId.StringValue]=body.event,self.emit(body.event,body,attrs),self._allWorkersDone()){if(global.artillery.version.startsWith("2.")){debug("ready to emit done event"),debug("mergedPeriodMetrics"),debug(self.mergedPeriodMetrics);const stats=global.artillery.__SSMS.pack(self.mergedPeriodMetrics);stats.summaries={};for(var[name,summary]of Object.entries(stats.histograms||{})){summary=global.artillery.__SSMS.summarizeHistogram(summary);stats.summaries[name]=summary}self.emit("done",stats)}else{const report=updateReport(stats.combine(self.aggregate).report(),self.aggregateHistogram);self.emit("done",{report:()=>report})}driftless.clearDriftless(self.taskWatcher),self.sqsConsumer.stop(),self.emit("workersDone",self.workerState)}}),this.ee.on("messageReceiveTimeout",()=>{}),this.sqsConsumer=Consumer.create({queueUrl:process.env.SQS_QUEUE_URL||this.sqsQueueUrl,region:this.region,waitTimeSeconds:2,messageAttributeNames:["testId","workerId"],batchSize:10,sqs:new AWS.SQS({httpOptions:{agent:new https.Agent({keepAlive:!0})},region:this.region}),handleMessage:async message=>{let body=null;try{body=JSON.parse(message.Body)}catch(ignoreErr){}if(process.env.LOG_SQS_MESSAGES&&console.log(message),!body)return Promise.reject(new Error);const attrs=message.MessageAttributes;return!attrs||!attrs.testId||self.testId!==attrs.testId.StringValue?Promise.reject(new Error):(process.nextTick(function(){self.ee.emit("message",body,attrs)}),Promise.resolve())}}),this.sqsConsumer.on("error",err=>{err.message&&err.message.match(/ReceiptHandle.+expired/i)?debug(err.name,err.message):(artillery.log(err),self.sqsConsumer.stop(),self.emit("error",err))});let empty=0;this.sqsConsumer.on("empty",()=>{empty++,10<empty&&self.ee.emit("messageReceiveTimeout")}),this.sqsConsumer.start()}calculateSpread(period){period=_.reduce(period._requestTimestamps,(acc,ts)=>(acc.min=Math.min(acc.min,ts),acc.max=Math.max(acc.max,ts),acc),{min:1/0,max:0});return round((period.max-period.min)/1e3,1)}}function updateReport(report,histo){return report.latency.min=round(histo.minNonZeroValue,1),report.latency.max=round(histo.maxValue,1),report.latency.median=round(histo.getValueAtPercentile(50),1),report.latency.p95=round(histo.getValueAtPercentile(95),1),report.latency.p99=round(histo.getValueAtPercentile(99),1),report}function round(number,m){m=Math.pow(10,m);return Math.round(number*m)/m}module.exports={SqsReporter:SqsReporter};