/** @license
 * (c) 2020 Shoreditch Ops Ltd. All rights reserved.
 *
 * This file is part of Artillery Pro (https://artillery.io)
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Shoreditch Ops Ltd. The intellectual and
 * technical concepts contained herein are proprietary to
 * Shoreditch Ops Ltd and are protected by copyright law.
 *
 * Modification and/or redistribution of this material is
 * strictly forbidden unless prior written permission is
 * obtained from Shoreditch Ops Ltd.
 *
 */
const path=require("path"),fs=require("fs"),A=require("async"),isBuiltinModule=require("is-builtin-module"),detective=require("detective"),depTree=require("dependency-tree"),walkSync=require("walk-sync"),debug=require("debug")("bom"),_=require("lodash"),chalk=require("chalk"),BUILTIN_PLUGINS=require("../plugins").getPluginNames(),Table=require("cli-table3");if(require.main===module){require("../create-artillery-log")();const assert=require("assert"),{SCRIPT}=process.env;let EXTRA_FILES=[];process.env.EXTRA_FILES&&(EXTRA_FILES=process.env.EXTRA_FILES.split(",").map(p=>path.resolve(process.cwd(),p))),assert(SCRIPT,"SCRIPT env var pointing to the script file should be set"),artillery.log(`SCRIPT = ${SCRIPT}`),artillery.log(`EXTRA_FILES = ${EXTRA_FILES}`);const absoluteScriptPath=path.resolve(process.cwd(),SCRIPT);artillery.log(`absoluteScriptPath = ${absoluteScriptPath}`),artillery.log("\n\n"),createBOM(absoluteScriptPath,EXTRA_FILES,{},function(err,bom){err?artillery.log(err):prettyPrint(bom)})}function createBOM(absoluteScriptPath,extraFiles,opts,callback){A.waterfall([A.constant(absoluteScriptPath),global.artillery.__util.readScript,global.artillery.__util.parseScript,(scriptData,next)=>next(null,{opts:{scriptData:scriptData,absoluteScriptPath:absoluteScriptPath},localFilePaths:[absoluteScriptPath],npmModules:[]}),getPlugins,getCustomEngines,getCustomJsDependencies,getVariableDataFiles,getFileUploadPluginFiles,getExtraFiles,expandDirectories],function(pkgDeps,context){if(pkgDeps)return callback(pkgDeps,null);context.localFilePaths=context.localFilePaths.concat(extraFiles);let prefix="";prefix=1===context.localFilePaths.length?(prefix=context.localFilePaths[0].substring(0,context.localFilePaths[0].length-path.basename(context.localFilePaths[0]).length),0===prefix.length?context.localFilePaths[0]:prefix):commonPrefix(context.localFilePaths),debug("prefix",prefix);let packageDescriptionFiles=[".npmrc"];opts.packageJsonPath?packageDescrpitionFiles.push(opts.packageJsonPath):packageDescriptionFiles=packageDescriptionFiles.concat(["package.json","package-lock.json","yarn.lock"]);const dependencyFiles=packageDescriptionFiles.map(s=>path.join(prefix,s));debug(dependencyFiles),dependencyFiles.forEach(function(p){try{fs.statSync(p)&&context.localFilePaths.push(p)}catch(ignoredErr){}});var files=context.localFilePaths.map(p=>({orig:p,noPrefix:p.substring(prefix.length,p.length)})),pkgDeps=_.find(files,f=>"package.json"===f.noPrefix);return pkgDeps?(pkgDeps=JSON.parse(fs.readFileSync(pkgDeps.orig,"utf8")),pkgDeps=[].concat(Object.keys(pkgDeps.dependencies||{}),Object.keys(pkgDeps.devDependencies||{})),context.pkgDeps=pkgDeps,context.npmModules=_.uniq(context.npmModules.concat(pkgDeps)).sort()):context.pkgDeps=[],callback(null,{files:_.uniqWith(files,_.isEqual),modules:_.uniq(context.npmModules),pkgDeps:context.pkgDeps})})}function isLocalModule(modName){return modName.startsWith(".")}function getPlugins(context,next){var pluginPackages=_.reduce(_.get(context,"opts.scriptData.config.environments",{}),function(acc,envSpec,envName){return acc=acc.concat(Object.keys(envSpec.plugins||[]))},[]);const pluginNames=Object.keys(_.get(context,"opts.scriptData.config.plugins",{})).concat(pluginPackages);pluginPackages=_.uniq(pluginNames.filter(p=>-1===BUILTIN_PLUGINS.indexOf(p)).map(p=>`artillery-plugin-${p}`));return debug(pluginPackages),context.npmModules=context.npmModules.concat(pluginPackages),next(null,context)}function getCustomEngines(context,next){const engineNames=_.uniq(Object.keys(_.get(context,"opts.scriptData.config.engines",{})));var enginePackages=engineNames.map(x=>`artillery-engine-${x}`);return context.npmModules=context.npmModules.concat(enginePackages),next(null,context)}function getCustomJsDependencies(context,next){if(context.opts.scriptData.config&&context.opts.scriptData.config.processor){var procSrc=path.resolve(path.dirname(context.opts.absoluteScriptPath),context.opts.scriptData.config.processor);context.localFilePaths.push(procSrc);const tree=depTree.toList({filename:procSrc,directory:path.dirname(context.opts.absoluteScriptPath),filter:path=>-1===path.indexOf("node_modules")});debug("tree"),debug(tree);const allNpmDeps=tree.map(function(src){src=fs.readFileSync(src);const requires=detective(src);return requires.filter(requireString=>!isBuiltinModule(requireString)&&!isLocalModule(requireString)).map(requireString=>requireString.startsWith("@")?requireString.split("/")[0]+"/"+requireString.split("/")[1]:requireString.split("/")[0])});debug(allNpmDeps);var reduced=allNpmDeps.reduce((acc,deps)=>(deps.forEach(d=>{-1===acc.findIndex(x=>x===d)&&acc.push(d)}),acc),[]);debug(reduced);procSrc=fs.readFileSync(procSrc),detective(procSrc);return context.localFilePaths=context.localFilePaths.concat(tree),context.npmModules=context.npmModules.concat(reduced),debug("got custom JS dependencies"),next(null,context)}return debug("no custom JS dependencies"),next(null,context)}function getVariableDataFiles(context,next){function resolvePayloadPaths(obj){let result=[];return obj.payload&&(_.isArray(obj.payload)?obj.payload.forEach(payloadSpec=>{result.push(path.resolve(path.dirname(context.opts.absoluteScriptPath),payloadSpec.path))}):_.isObject(obj.payload)&&result.push(path.resolve(path.dirname(context.opts.absoluteScriptPath),obj.payload.path))),result}return context.localFilePaths=context.localFilePaths.concat(resolvePayloadPaths(context.opts.scriptData.config)),context.opts.scriptData.config.environments=context.opts.scriptData.config.environments||{},Object.keys(context.opts.scriptData.config.environments).forEach(envSpec=>{envSpec=context.opts.scriptData.config.environments[envSpec];context.localFilePaths=context.localFilePaths.concat(resolvePayloadPaths(envSpec))}),next(null,context)}function getFileUploadPluginFiles(context,next){var absPaths;return context.opts.scriptData.config&&context.opts.scriptData.config.plugins&&context.opts.scriptData.config.plugins["http-file-uploads"]&&context.opts.scriptData.config.plugins["http-file-uploads"].filePaths&&(absPaths=context.opts.scriptData.config.plugins["http-file-uploads"].filePaths.map(p=>path.resolve(path.dirname(context.opts.absoluteScriptPath),p)),context.localFilePaths=context.localFilePaths.concat(absPaths)),next(null,context)}function getExtraFiles(context,next){if(context.opts.scriptData.config&&context.opts.scriptData.config.includeFiles){var absPaths=_.map(context.opts.scriptData.config.includeFiles,includePath=>{includePath=path.resolve(path.dirname(context.opts.absoluteScriptPath),includePath);return debug("includeFile:",includePath),includePath});return context.localFilePaths=context.localFilePaths.concat(absPaths),next(null,context)}return next(null,context)}function expandDirectories(context,next){debug(context.localFilePaths);const dirs=context.localFilePaths.filter(p=>{let result=!1;try{result=fs.statSync(p).isDirectory()}catch(fsErr){}return result});return context.localFilePaths=context.localFilePaths.filter(p=>{let result=!0;try{result=!fs.statSync(p).isDirectory()}catch(fsErr){}return result}),debug("Dirs to expand"),debug(dirs),dirs.forEach(d=>{const entries=walkSync.entries(d,{directories:!1});debug(entries),context.localFilePaths=context.localFilePaths.concat(entries.map(e=>path.resolve(d,e.relativePath)))}),next(null,context)}function commonPrefix(strings){if(!Array.isArray(strings))throw new Error("common-prefix expects an array of strings");for(var first=strings[0]||"",commonLength=first.length,i=1;i<strings.length;++i)for(var j=0;j<commonLength;++j)if(strings[i].charAt(j)!==first.charAt(j)){commonLength=j;break}return first.slice(0,commonLength)}function prettyPrint(manifest){artillery.logger({showTimestamp:!0}).log("Test bundle prepared..."),artillery.log("Test bundle contents:");const t=new Table({head:["Name","Type","Notes"]});for(const f of manifest.files)t.push([f.noPrefix,"file"]);for(const m of manifest.modules)t.push([m,"package",-1===manifest.pkgDeps.indexOf(m)?"not in package.json":""]);artillery.log(t.toString()),artillery.log()}module.exports={createBOM:createBOM,commonPrefix:commonPrefix,prettyPrint:prettyPrint};